//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Packages/me.deewens.2d.inventorysystem/Runtime/InventoryInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InventoryInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InventoryInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InventoryInputs"",
    ""maps"": [
        {
            ""name"": ""UIInventory"",
            ""id"": ""f2765dd1-34fe-47c8-95d3-9fddb2017afb"",
            ""actions"": [
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""78cb0c24-7c10-4db8-9a32-049e21b1ba88"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DropItem"",
                    ""type"": ""Button"",
                    ""id"": ""506779be-8fb7-4ded-a7c8-568cd27bb951"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hello"",
                    ""type"": ""Button"",
                    ""id"": ""e4647f9f-6e3d-4655-97ae-c4ca62b86485"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d5845c10-ccd3-4db2-8811-db84f2445755"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1fe5b291-2508-47cb-aba3-87ec939c3091"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DropItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""236fcaf0-479b-4c2e-9394-19bd2ea0a689"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hello"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // UIInventory
        m_UIInventory = asset.FindActionMap("UIInventory", throwIfNotFound: true);
        m_UIInventory_Action = m_UIInventory.FindAction("Action", throwIfNotFound: true);
        m_UIInventory_DropItem = m_UIInventory.FindAction("DropItem", throwIfNotFound: true);
        m_UIInventory_Hello = m_UIInventory.FindAction("Hello", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UIInventory
    private readonly InputActionMap m_UIInventory;
    private IUIInventoryActions m_UIInventoryActionsCallbackInterface;
    private readonly InputAction m_UIInventory_Action;
    private readonly InputAction m_UIInventory_DropItem;
    private readonly InputAction m_UIInventory_Hello;
    public struct UIInventoryActions
    {
        private @InventoryInputs m_Wrapper;
        public UIInventoryActions(@InventoryInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Action => m_Wrapper.m_UIInventory_Action;
        public InputAction @DropItem => m_Wrapper.m_UIInventory_DropItem;
        public InputAction @Hello => m_Wrapper.m_UIInventory_Hello;
        public InputActionMap Get() { return m_Wrapper.m_UIInventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIInventoryActions set) { return set.Get(); }
        public void SetCallbacks(IUIInventoryActions instance)
        {
            if (m_Wrapper.m_UIInventoryActionsCallbackInterface != null)
            {
                @Action.started -= m_Wrapper.m_UIInventoryActionsCallbackInterface.OnAction;
                @Action.performed -= m_Wrapper.m_UIInventoryActionsCallbackInterface.OnAction;
                @Action.canceled -= m_Wrapper.m_UIInventoryActionsCallbackInterface.OnAction;
                @DropItem.started -= m_Wrapper.m_UIInventoryActionsCallbackInterface.OnDropItem;
                @DropItem.performed -= m_Wrapper.m_UIInventoryActionsCallbackInterface.OnDropItem;
                @DropItem.canceled -= m_Wrapper.m_UIInventoryActionsCallbackInterface.OnDropItem;
                @Hello.started -= m_Wrapper.m_UIInventoryActionsCallbackInterface.OnHello;
                @Hello.performed -= m_Wrapper.m_UIInventoryActionsCallbackInterface.OnHello;
                @Hello.canceled -= m_Wrapper.m_UIInventoryActionsCallbackInterface.OnHello;
            }
            m_Wrapper.m_UIInventoryActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Action.started += instance.OnAction;
                @Action.performed += instance.OnAction;
                @Action.canceled += instance.OnAction;
                @DropItem.started += instance.OnDropItem;
                @DropItem.performed += instance.OnDropItem;
                @DropItem.canceled += instance.OnDropItem;
                @Hello.started += instance.OnHello;
                @Hello.performed += instance.OnHello;
                @Hello.canceled += instance.OnHello;
            }
        }
    }
    public UIInventoryActions @UIInventory => new UIInventoryActions(this);
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    public interface IUIInventoryActions
    {
        void OnAction(InputAction.CallbackContext context);
        void OnDropItem(InputAction.CallbackContext context);
        void OnHello(InputAction.CallbackContext context);
    }
}
